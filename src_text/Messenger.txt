Messenger is the module at the top of all the other modules. It sits on top of friend_connection in the hierarchy of toxcore.

Messenger takes care of sending and receiving messages using the connection provided by friend_connection. It is the module that takes the rest of toxcore which provides only a way for friends to connect and makes it usable as a instant messenger. For example Messenger lets users set a nickname, status message which it then transmits to friends when they are online. It also lets users send messages to friends. It basically takes the lower level friend_connection and builds an instant messaging system on top of it.

Messenger offers two ways to add a friend. The first way is to add a friend with only their long term public key, this is used when a friend needs to be added but for some reason a friend request should not be sent. The friend should only be added. This is most commonly used to accept friend requests but could also be used in other ways. If two friends add each other using this function they will connect to each other. Adding a friend using this method just adds the friend to friend_connection and creates a new friend entry in Messenger for the friend.

The Tox ID is what a Tox peer must give to their friends so that their friends can add them as friends in Tox. The Tox ID of a Tox peer contains the long term public key of the peer (32 bytes) followed by the 4 byte nospam (see: friend_requests) value and a 2 byte XOR checksum. How the Tox ID is sent to others is up to the user and the client. The recommended way is to encode it in hexadecimal and have the user manually send it to the friend using another program.

Tox ID:
[long term public key (32 bytes)][nospam (4 bytes)][checksum (2 bytes)]

The checksum is calculated by XORing the first two bytes of the ID with the next two bytes, then the next two bytes until all the 36 bytes have been XORed together. The result is then appended to the end to form the Tox ID.

The only requirement for safety is that the user must make sure the Tox ID is not intercepted and replaced in transit by a different Tox ID which would mean the friend would connect to a malicious person instead of the user though protecting against that is out of the scope of Tox.

Tox assumes that the user has made sure that added friends are added with the correct Tox ID that belongs to the right person.

The second way to add a friend is to add a friend with a Tox ID and a message to be sent in a friend request. This way of adding friends will try to send a friend request with the set message to the peer whos Tox ID that was added. It is the same function as the first one except that a friend request is crafted and sent to the other peer.

When a friend connection associated to a Messenger friend goes online, a ONLINE packet will be sent to them. Friends are only set as online if an ONLINE packet is received.

As soon as a friend goes online, Messenger will forever stop sending friend requests to that friend if it was sending them.

Friends will be set as offline if either the friend connection associated to them goes offline or if an OFFLINE packet is received from the friend.

Messenger packets are sent to the friend using the online friend connection to the friend.

List of Messenger packets:

ONLINE: 
length: 1 byte
[uint8_t (24)]

Sent to a friend when a connection is established to tell them to show us as online in their friends list. The reason this packet and the OFFLINE packet exist is because friend_connections can be established to non friends if non friends are in a groupchat. Since the fact that an online friend connection to a peer exists does not mean this peer has that peer as a friend. In order to prevent a peer connected to us through a group chat but that isn't a friend from showing as online if we have them as a friend both this packet and the OFFLINE packet are needed.

On receiving this packet, Messenger will show the peer as being online.

OFFLINE:
length: 1 byte
[uint8_t (25)]

Sent to a friend when deleting the friend. Prevents a deleted friend from seeing us as online if we are connected to them because of a group chat.

On receiving this packet, Messenger will show this peer as offline.

NICKNAME:
length: 1 byte to 129 bytes.
[uint8_t (48)][Nickname as a UTF8 byte string(Min length: 0 bytes, Max length: 128 bytes)]

Used to send the nickname of the peer to others. This packet should be sent every time to each friend every time they come online and each time the nickname is changed.

STATUSMESSAGE:
length: 1 byte to 1008 bytes.
[uint8_t (49)][Status message as a UTF8 byte string(Min length: 0 bytes, Max length: 1007 bytes)]

Used to send the status message of the peer to others. This packet should be sent every time to each friend every time they come online and each time the status message is changed.

USERSTATUS:
length: 2 bytes
[uint8_t (50)][uint8_t status (0 = online, 1 = away, 2 = busy)]

Used to send the user status of the peer to others. This packet should be sent every time to each friend every time they come online and each time the user status is changed.

TYPING:
length: 2 bytes
[uint8_t (51)][uint8_t typing status (0 = not typing, 1 = typing)]

Used to tell a friend if we are currently typing or not.

MESSAGE:
[uint8_t (64)][Message as a UTF8 byte string (Min length: 0 bytes, Max length: 1372 bytes)]

Used to send a normal text message to the friend.

ACTION:
[uint8_t (65)][Action message as a UTF8 byte string (Min length: 0 bytes, Max length: 1372 bytes)]

Used to send an action message (like an IRC action) to the friend.

MSI:
[uint8_t (69)][data]

Reserved for Tox AV usage.

File Transfer Related Packets:
FILE_SENDREQUEST:
[uint8_t (80)][uint8_t file number][uint32_t file type][uint64_t file size][file id (32 bytes)][filename as a UTF8 byte string (Min length: 0 bytes, Max length: 255 bytes)]

Note that file type and file size are sent in big endian/network byte format.

FILE_CONTROL:
length: 4 bytes if control_type isn't seek. 8 bytes if control_type is seek.
[uint8_t (81)][uint8_t send_receive (0 if the control targets a file being sent (by the peer sending the file control), 1 if it targets a file being received)][uint8_t file number][uint8_t control_type (0 = accept, 1 = pause, 2 = kill, 3 = seek)][uint64_t seek parameter (only included when control_type is seek)]

Note that if it is included the seek parameter will be sent in big endian/network byte format.

FILE_DATA:
length: 2 to 1373 bytes.

[uint8_t (82)][uint8_t file number][file data piece (Min length: 0 bytes, Max length: 1371 bytes)]


Group Chat Related Packets:
INVITE_GROUPCHAT 96
ONLINE_PACKET 97
DIRECT_GROUPCHAT 98
MESSAGE_GROUPCHAT 99
LOSSY_GROUPCHAT 199


File transfers are how files are transferred with Tox.

To initiate a file transfer, the friend creates and sends a FILE_SENDREQUEST packet to the friend it wants to initiate a file transfer to.

The first part of the FILE_SENDREQUEST packet is the file number. The file number is the number of this file transfer. The fact that file number is represented by a 1 byte number means that the maximum amount of concurrent files Tox can send to a friend is 256. 256 file transfers per friend is enough that clients can use tricks like queueing files if there are more files needing to be sent.

256 outgoing files per friend means that there is a total of 512 file transfers that can happen at the same time if both incoming and outgoing file transfers are counted together.

File numbers are used to identify the file transfer meaning that when creating a new outgoing file transfer the Tox instance must make sure to use a file number that isn't used for another outgoing file transfer to that same friend.

The second part of the file transfer request is the file type. This is simply a number that identifies the type of file. for example, tox.h defines the file type 0 as being a normal file and type 1 as being an avatar meaning the Tox client should use that file as an avatar. The file type does not affect in any way how the file is transfered or the behavior of the file transfer. It is set by the Tox client that creates the file transfers and send to the friend untouched.

The file size indicates the total size of the file that will be transfered. A file size of UINT64_MAX (maximum value in a uint64_t) means that the size of the file is undetermined or unknown. For example if someone wanted to use Tox file transfers to stream data they would set the file size to UINT64_MAX. A file size of 0 is valid and behaves exactly like a normal file transfer.

The file id is 32 bytes that can be used to uniquely identify the file transfer. For example avatar transfers use it as the hash of the avatar so that the receiver can check if they already have the avatar for a friend which saves bandwidth. It is also used to identify broken file transfers across toxcore restarts (for more info see the file transfer section of tox.h). The file transfer implementation does not care about what the file id is, as it is only used by things above it.

The last part of the file transfer is the optional file name which is used to tell the receiver the name of the file.

When a FILE_SENDREQUEST packet is received, the implementation validates and sends the info to the Tox client which decides if they should accept the file transfer or not.

To refuse or cancel a file transfer, they will send a FILE_CONTROL packet with control_type kill.

FILE_CONTROL packets are used to control the file transfer. FILE_CONTROL packets are used to accept/unpause, pause, kill/cancel and seek file transfers. The control_type parameter denotes what the file control packet does.

The send_receive and file number are used to identify a specific file transfer. Since file numbers for outgoing and incoming files are not related to each other, the send_receive parameter is used to identify if the file number belongs to files being sent or files being received. If send_receive is 0, the file number corresponds to a file being sent by the one sending the file control packet, if it is 1 it means it corresponds to a file being received.






