The code in toxcore is split into different modules (or files) that each do one function of the program. For example there is one DHT code file that implements a DHT and a TCP_server that implements a Tox TCP server.

The interface for each file is in the .h file with the same name as the corresponding .c file. Toxcore follows the principles of object oriented programming: each module has a new_[Object Name] function to create the object or module, a do_[Object Name] function to 'execute' the object and a kill_[Object Name] function to destroy the object. When looking at in from the point of view of an object oriented language the new_[Object Name] function would be the constructor and the kill_[Object Name] function would be the destructor. The do_[Object Name] function is a function that should be called at least every second but the real frequently it should be called depends on the object. do_[Object Name] functions are written in a way that calling it at high intervals will not have any negative consequences except perhaps higher resource usage. Depending on the module, calling the do_[Object Name] functions function at low intervals might introduce some issues.

Each module usually have a number of functions that use the object created by the new_[Object Name] function as the first argument to interact with that object. The data structure of the object is in the .h and so are all accessible as nothing has been made opaque however interacting with an object this way is discouraged. Reading a variable straight from the object structure is allowed however writing to it is never allowed by other modules.

Return values are documented as a comment above each function. usually negative values mean failure and 0 means success however it depends on the function.

